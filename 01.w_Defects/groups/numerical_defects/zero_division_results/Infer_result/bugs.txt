Found 28 issues

zero_division.c:22: error: DIVIDE_BY_ZERO
  Expression `0` could be zero at line 22, column 2.
  20.   	int dividend = 1000;
  21.   	int ret;
  22. > 	ret = dividend / 0;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  23.   }
  24.   

zero_division.c:18: error: PURE_FUNCTION
  Side-effect free function zero_division_001.
  16.    * Complexity: divide (/)	Basic type	int	Constant
  17.    */
  18. > void zero_division_001 ()
  19.   {
  20.   	int dividend = 1000;

zero_division.c:33: error: DIVIDE_BY_ZERO
  Expression `0` could be zero at line 33, column 2.
  31.   	int dividend = 1000;
  32.   	int ret;
  33. > 	dividend /= 0;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  34.   	ret = dividend;
  35.   }

zero_division.c:29: error: PURE_FUNCTION
  Side-effect free function zero_division_002.
  27.    * Complexity: divide (/ =)	Basic type	int	Constant
  28.    */
  29. > void zero_division_002 ()
  30.   {
  31.   	int dividend = 1000;

zero_division.c:46: error: DIVIDE_BY_ZERO
  Expression `0` could be zero at line 46, column 2.
  44.   	int dividend = 1000;
  45.   	int ret;
  46. > 	ret = dividend % 0;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  47.   }
  48.   

zero_division.c:42: error: PURE_FUNCTION
  Side-effect free function zero_division_003.
  40.    */
  41.   
  42. > void zero_division_003 ()
  43.   {
  44.   	int dividend = 1000;

zero_division.c:77: error: DIVIDE_BY_ZERO
  Expression `divisors[2]` could be zero at line 77, column 2.
  75.   	int divisors[5] = {2, 1, 0, 3, 4};
  76.   	int ret;
  77. > 	ret = dividend / divisors[2];/*Tool should detect this line as error*/ /* ERROR:division by zero */
  78.   }
  79.   

zero_division.c:72: error: PURE_FUNCTION
  Side-effect free function zero_division_005.
  70.    * Complexity: divide (/)	1-Dimensional array	int	An array of element values
  71.    */
  72. > void zero_division_005 ()
  73.   {
  74.   	int dividend = 1000;

zero_division.c:85: error: PURE_FUNCTION
  Side-effect free function zero_division_006.
  83.    */
  84.   int zero_division_006_gbl_divisor = 0;
  85. > void zero_division_006 ()
  86.   {
  87.   	int dividend = 1000;

zero_division.c:117: error: DIVIDE_BY_ZERO
  Expression `zero_division_007_s_gbl.divisor` could be zero at line 117, column 2.
  115.   	int ret;
  116.   	zero_division_007_func_001();
  117. > 	ret = dividend / zero_division_007_s_gbl.divisor;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  118.   }
  119.   

zero_division.c:128: error: DIVIDE_BY_ZERO
  Expression `0.` could be zero at line 128, column 2.
  126.   	float dividend = 1000.0;
  127.   	float ret;
  128. > 	ret = dividend / 0.0;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  129.   }
  130.   

zero_division.c:124: error: PURE_FUNCTION
  Side-effect free function zero_division_008.
  122.    * Complexity: divide (/)	Basic type	float	Constant
  123.    */
  124. > void zero_division_008 ()
  125.   {
  126.   	float dividend = 1000.0;

zero_division.c:140: error: DIVIDE_BY_ZERO
  Expression `divisor` could be zero at line 140, column 2.
  138.   	int divisor = 0;
  139.   	int ret;
  140. > 	ret = dividend / divisor;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  141.   }
  142.   

zero_division.c:135: error: PURE_FUNCTION
  Side-effect free function zero_division_009.
  133.    * Complexity: divide (/)	Basic type	int	Variable
  134.    */
  135. > void zero_division_009 ()
  136.   {
  137.   	int dividend = 1000;

zero_division.c:165: error: DIVIDE_BY_ZERO
  Expression `((2*divisor)-4)` could be zero at line 165, column 2.
  163.   	int divisor = 2;
  164.   	int ret;
  165. > 	ret = dividend / (2 * divisor - 4);/*Tool should detect this line as error*/ /* ERROR:division by zero */
  166.   }
  167.   

zero_division.c:160: error: PURE_FUNCTION
  Side-effect free function zero_division_011.
  158.    * Complexity: divide (/)	Basic type	int	Linear equation
  159.    */
  160. > void zero_division_011 ()
  161.   {
  162.   	int dividend = 1000;

zero_division.c:177: error: DIVIDE_BY_ZERO
  Expression `((divisor*divisor)-4)` could be zero at line 177, column 2.
  175.   	int divisor = 2;
  176.   	int ret;
  177. > 	ret = dividend / (divisor * divisor - 4);/*Tool should detect this line as error*/ /* ERROR:division by zero */
  178.   
  179.   }

zero_division.c:172: error: PURE_FUNCTION
  Side-effect free function zero_division_012.
  170.    * Complexity: divide (/)	Basic type	int	Nonlinear equation
  171.    */
  172. > void zero_division_012 ()
  173.   {
  174.   	int dividend = 1000;

zero_division.c:185: error: PURE_FUNCTION
  Side-effect free function zero_division_013_func_001.
  183.    * Complexity: divide (/)	Basic type	int	The return value of the function
  184.    */
  185. > int zero_division_013_func_001 ()
  186.   {
  187.   	return 0;

zero_division.c:194: error: DIVIDE_BY_ZERO
  Expression `returned by zero_division_013_func_001()` could be zero at line 194, column 2.
  192.   	int dividend = 1000;
  193.   	int ret;
  194. > 	ret = dividend / zero_division_013_func_001();/*Tool should detect this line as error*/ /* ERROR:division by zero */
  195.   }
  196.   

zero_division.c:190: error: PURE_FUNCTION
  Side-effect free function zero_division_013.
  188.   }
  189.   
  190. > void zero_division_013 ()
  191.   {
  192.   	int dividend = 1000;

zero_division.c:201: error: PURE_FUNCTION
  Side-effect free function zero_division_014_func_001.
  199.    * Complexity: divide (/)	Basic type	int	Function arguments
  200.    */
  201. > void zero_division_014_func_001 (int divisor)
  202.   {
  203.   	int dividend = 1000;

zero_division.c:210: error: DIVIDE_BY_ZERO
  Expression `0` could be zero at line 210, column 2.
  208.   void zero_division_014 ()
  209.   {
  210. > 	zero_division_014_func_001(0);
  211.   }
  212.   

zero_division.c:208: error: PURE_FUNCTION
  Side-effect free function zero_division_014.
  206.   }
  207.   
  208. > void zero_division_014 ()
  209.   {
  210.   	zero_division_014_func_001(0);

zero_division.c:224: error: DIVIDE_BY_ZERO
  Expression `divisor1` could be zero at line 224, column 2.
  222.   	int ret;
  223.   	divisor1 = divisor;
  224. > 	ret = dividend / divisor1;/*Tool should detect this line as error*/ /* ERROR:division by zero */
  225.   }
  226.   

zero_division.c:217: error: PURE_FUNCTION
  Side-effect free function zero_division_015.
  215.    * Complexity: divide (/)	Basic type	int	single Alias
  216.    */
  217. > void zero_division_015 ()
  218.   {
  219.   	int dividend = 1000;

zero_division.c:239: error: INTEGER_OVERFLOW_L5
  ([-oo, +oo] + 1):signed32.
  237.   void zero_division_016_func_002 ()
  238.   {
  239. > 	(*zero_division_016_gbl_divisor)++;
  240.   }
  241.   void zero_division_016 ()

zero_division.c:278: error: INTEGER_OVERFLOW_L5
  ([-oo, +oo] - 1):signed32 by call to `zero_division_004`.
  276.   	if (vflag == 4 || vflag ==888)
  277.   	{
  278. > 		zero_division_004();
  279.   	}
  280.   

Summary of the reports

        PURE_FUNCTION: 14
       DIVIDE_BY_ZERO: 12
  INTEGER_OVERFLOW_L5: 2